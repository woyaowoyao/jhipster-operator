oc new-app --template jhipster-registry-template -p APPLICATION_NAME=jhipster-registry   

? Which applications do you want to include in your configuration? gateway, invoice, review
? Do you want to setup monitoring for your applications ? Yes, for logs and metrics with the JHipster Console (based on ELK and Zipkin)
JHipster registry detected as the service discovery and configuration provider used by your apps
? Enter the admin password used to secure the JHipster Registry admin
? What should we use for the OpenShift namespace? jhipster
? Which *type* of database storage would you like to use? Ephemeral Storage
? What should we use for the base Docker repository name? robin9999
? What command should we use for push Docker image to repository? docker push

Checking Docker images in applications directories...
ls: no such file or directory: /root/github/jhipster/jhipster-operator/example-app/gateway/target/jib-cache
ls: no such file or directory: /root/github/jhipster/jhipster-operator/example-app/invoice/target/jib-cache
ls: no such file or directory: /root/github/jhipster/jhipster-operator/example-app/review/target/jib-cache
   create ../ocp/ocp-apply.sh
   create ../ocp/gateway/gateway-deployment.yml
   create ../ocp/gateway/gateway-mysql.yml
   create ../ocp/invoice/invoice-deployment.yml
   create ../ocp/invoice/invoice-mysql.yml
   create ../ocp/review/review-deployment.yml
   create ../ocp/review/review-mysql.yml
   create ../ocp/registry/scc-config.yml
   create ../ocp/registry/jhipster-registry.yml
   create ../ocp/registry/application-configmap.yml
   create ../ocp/monitoring/jhipster-monitoring.yml

WARNING! OpenShift configuration generated, but no Jib cache found
If you forgot to generate the Docker image for this application, please run:
To generate the missing Docker image(s), please run:
  ./mvnw -ntp -Pprod verify jib:dockerBuild in /root/github/jhipster/jhipster-operator/example-app/gateway
  ./mvnw -ntp -Pprod verify jib:dockerBuild in /root/github/jhipster/jhipster-operator/example-app/invoice
  ./mvnw -ntp -Pprod verify jib:dockerBuild in /root/github/jhipster/jhipster-operator/example-app/review

 oc rollout latest gateway

sudo -i
cd /home/laidongs-cn.ibm.com/github/jhipster-operator/example-app/gateway
mvn install -Pprod jib:dockerBuild -DskipTests
 mvn install -Pdev jib:dockerBuild -DskipTests

cd  /home/laidongs-cn.ibm.com/github/jhipster-operator/example-app/invoice
mvn install -Pprod jib:dockerBuild -DskipTests
 mvn install -Pdev jib:dockerBuild -DskipTests

 cd /home/laidongs-cn.ibm.com/github/jhipster-operator/example-app/review
 mvn install -Pprod jib:dockerBuild -DskipTests
  mvn install -Pdev jib:dockerBuild -DskipTests

WARNING! You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:
  docker image tag gateway robin9999/gateway
  docker push robin9999/gateway
  docker image tag invoice robin9999/invoice
  docker push robin9999/invoice
  docker image tag review robin9999/review
  docker push robin9999/review


# run on ocp
cd /home/laidongs-cn.ibm.com/github/jhipster-operator
cd example-app/ocp
You can deploy all your apps by running:
  sh ocp-apply.sh
OR
  oc process -f ../ocp/registry/scc-config.yml | oc apply -f -
  oc process -f ../ocp/monitoring/jhipster-monitoring.yml | oc apply -f -
  oc process -f ../ocp/registry/application-configmap.yml | oc apply -f -
  oc process -f ../ocp/registry/jhipster-registry.yml | oc apply -f -
  oc process -f ../ocp/gateway/gateway-mysql.yml | oc apply -f -
  oc process -f ../ocp/gateway/gateway-deployment.yml | oc apply -f -
  oc process -f ../ocp/invoice/invoice-mysql.yml | oc apply -f -
  oc process -f ../ocp/invoice/invoice-deployment.yml | oc apply -f -
  oc process -f ../ocp/review/review-mysql.yml | oc apply -f -
  oc process -f ../ocp/review/review-deployment.yml | oc apply -f -
   
   oc rollout latest gateway

  kubectl expose service jhipster-registry --type=NodePort --name=exposed-registry -n jhipster
  kubectl get svc exposed-registry -n jhipster
 kubectl scale statefulset jhipster-registry --replicas 3 -n jhipster
```
cd ..
 ./mvnw -ntp -Pprod verify jib:dockerBuild #in /example-app/gateway
  ./mvnw -ntp -Pprod verify jib:dockerBuild #in /example-app/invoice
  ./mvnw -ntp -Pprod verify jib:dockerBuild #in /example-app/review

 sudo  sh ./mvnw -ntp -Pprod verify jib:dockerBuild
 cd invoice 
 sudo  sh ./mvnw -ntp -Pprod verify jib:dockerBuild
 cd review
 sudo  sh ./mvnw -ntp -Pprod verify jib:dockerBuild 
## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by `kubectl create secret docker-registry` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications get killed, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the `initialDelySeconds` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!

> my SQL-based microservice is stuck during Liquibase initialization when running multiple replicas

Sometimes the database changelog lock gets corrupted. You will need to connect to the database using `kubectl exec -it` and remove all lines of liquibases `databasechangeloglock` table.

  #package image
  sh ./mvnw package -Pprod -DskipTests jib:dockerBuild
  #fix 权限不够
  oc adm policy add-scc-to-user anyuid -z default
  
   oc delete all -l app=gateway-app
  oc rollout latest

   oc rollout latest dc/gateway
   oc get pods
   oc logs pod/
   oc rollout latest dc/invoice
 oc logs pod/gateway-mysqldb-1-q6pnv
 oc rsh pod/gateway-mysqldb-1-q6pnv

   echo $MYSQL_PASSWORD    #   mysql -h localhost -u user176 -p 20otSFupxe0SYgPk
   echo $MYSQL_ROOT_PASSWORD   # mysql -h localhost -u root -p  $MYSQL_ROOT_PASSWORD
   echo $MYSQL_USER   #pxH68tLEYONLnR14

   mysql -h 127.0.0.1 -u $MYSQL_USER -p $MYSQL_PASSWORD -D $MYSQL_DATABASE
   mysql -h 127.0.0.1 -u $MYSQL_USER -p $MYSQL_PASSWORD -D $MYSQL_DATABASE


